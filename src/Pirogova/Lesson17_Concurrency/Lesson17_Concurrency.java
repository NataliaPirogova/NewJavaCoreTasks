package Pirogova.Lesson17_Concurrency;

public class Lesson17_Concurrency {
//    1. Создать класс расширяющий Thread
//    Создать класс NewThread расширяющий Thread.
//    Переопределить метод run(). В цикле for вывести на консоль символ 100 раз.
//    Создать экземпляр класса и запустить новый поток.
//
//2. Создать класс реализующий Runnable
//    Создать класс, реализующий интерфейс Runnable.
//    Переопределить run() метод. Создать цикл for. В цикле распечатываем значения от 0 до 100 делящиеся на 10 без остатка.
//    Используем статический метод Thread.sleep(), чтобы сделать паузу.
//    Создать три потока, выполняющих задачу распечатки значений.
//
//            3. Вывод символа в трех потоках
//    Необходимо создать три потока, которые изменяют один и тот же объект. Каждый поток должен вывести на экран одну букву 100 раз, и затем увеличить значение символа на 1.
//
//    Создать класс расширяющий Thread.
//    Переопределить метод run() - здесь будет находиться синхронизированный блок кода.
//    Для того чтобы три объекта потока имели доступ к одному объекту, создаем конструктор принимающий на вход StringBuilder объект.
//    Синхронизированный блок кода будет получать монитор на объект StringBuilder из пункта 3.
//    Внутри синхронизированного блока кода выведите StringBuilder на экран 100 раз, а потом увеличьте значение символа на 1.
//    В методе main() создайте один объект класса StringBuilder, используя символ ‘a’.
//    Затем создайте три экземпляра объекта нашего класса и запустите потоки.
//
//            4. Параллельные целочисленные массивы в потоках
//    Условие задачи. Пользователь вводит с клавиатуры значение в массив. После чего запускаются два потока. Первый поток находит максимум в массиве, второй — минимум. Результаты вычислений возвращаются в метод main().
//
//    Решение. Данная задача решается с объявлением одного класса, в котором реализованы одновременно поиск минимального и максимального элемента массива. По желанию, можно реализовать два отдельных класса, которые будут определять соответствующие потоки.
//
//            5. Запись массивов чисел в файлы в разных потоках. Реализация интерфейса Runnable
//    Условие задачи. Заданы три целочисленных массива. Записать эти массивы в файл в паралельних потоках. Создать класс SaveAsThread для представления потока, который записывает целочисленный массив в файл.

}
